#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>

set -eo pipefail
set -o errtrace
set -o nounset

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )


# Before we do anything, move all the source code into a directory and don't allow modifying it
mv $BUILD_DIR /tmp/git-export

cd /tmp/git-export
echo "removing \`.git' only..."
cp gitmodules .gitmodules
find . -name .git | xargs rm -rf
rm -fr .profile.d

mkdir -p $BUILD_DIR
mv /tmp/git-export $BUILD_DIR/

source $DIR/script-common

export NIX_MNT=$CACHE_DIR/nix-mnt
export NIX_ROOT_PATH=$NIX_MNT/$NIX_VERSION_FULL

export_env_dir $ENV_DIR

mkdir -p $CACHE_DIR/bin

topic "Downloading proot"
download_and_install $CACHE_DIR $BUILD_DIR proot https://github.com/proot-me/proot-static-build/blob/master/static/proot-x86_64?raw=true

# add executables to path
export PATH=$BUILD_DIR/bin:$PATH

export NIX_ROOT_CACHE_PATH=$CACHE_DIR/nix-mnt/$NIX_VERSION_FULL
export REAL_APP_DIR=${REAL_APP_DIR:-/app}

# if [ -d "$NIX_ROOT_CACHE_PATH" ]; then
#   topic "nix $NIX_VERSION found in cache"
# else
  topic "Downloading nix $NIX_VERSION to cache"

  mkdir -p $CACHE_DIR/nix-mnt
  cd $CACHE_DIR/nix-mnt
  fetch nix-${NIX_VERSION}.tar.bz2 https://nixos.org/releases/nix/nix-${NIX_VERSION}/nix-${NIX_VERSION}-x86_64-linux.tar.bz2
  tar xjf nix-${NIX_VERSION}.tar.bz2
  echo "Done extracting." | indent
  rm nix-${NIX_VERSION}.tar.bz2
# fi

topic "Copying nix to $NIX_ROOT_PATH"
mkdir -p $NIX_ROOT_PATH
rsync -av $NIX_ROOT_CACHE_PATH/ $NIX_ROOT_PATH

$BUILD_DIR/bin/proot -b $NIX_ROOT_PATH:/nix bash $DIR/nix-install-proot $BUILD_DIR

topic "Cleaning up $BUILD_DIR"
mv $BUILD_DIR/git-export/Procfile $BUILD_DIR/
rm -fr $BUILD_DIR/git-export

topic "Make sure your Procfile includes run_proot.sh,"
echo "like so:" | indent
echo "web: run_proot.sh myapp -p \$PORT" | indent
